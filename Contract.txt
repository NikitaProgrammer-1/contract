// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.7;

contract ShopManager {

    enum Role {
        BUYER,
        SELLER,
        SHOP,
        OWNER
    }
    Role currentRole;

    struct User {
        string username;
        string shop;
        bytes32 passwordHash;
        bytes32 secretHash;
        Role maxRole;
        Role currentRole;
        bool exists;
    }

    struct Shop {
        string name;
        address owner;
        uint256 allowedToCapture;
        bool exists;
    }

    struct ElevateRequest {
        address sender;
        Role role;
        string shop;
        bool exists;
    }   

    struct ShopProductList {
        string shop;
        mapping(uint256 => ShopProduct) products;
    }

    struct ShopProduct {
        uint256 id;
        uint256 price;
        uint256 amount;
        bool exists;
    }

    struct UserProducts{
        address user;
        mapping (string=>UserShopProducts) shops;
    }
    struct UserShopProducts{
        string shop;
        mapping(uint256 => UserOwnedProduct) products;
    }
    struct UserOwnedProduct {
        uint256 id;
        uint256 amount;
    }

    struct Product {
        uint256 id;
        string title;
        string description;
    }

    struct BuyRequest {
        address author;
        uint256 productId;
        uint256 amount;
        string shop;
        bool accepted;
        bool reviewed;
        bool exists;
    }

    struct RefundRequest {
        uint256 id;
        uint256 buyRequestId;
        address author;
        bool reviewed;
        bool accepted;
        bool exists;
    }

    mapping (address =>UserProducts) userProducts;

     mapping(uint256 => RefundRequest) refundRequests;
    uint256[] refundRequestIds;

    mapping(uint256 => BuyRequest) BuyRequests;
    uint256[] buyRequestIds;

    mapping(string => ShopProductList) shopProducts;

    mapping(address => User) users;
    mapping(string => address) userLogins;
    string[] userLoginsArray;

    mapping(address => ElevateRequest) elevReqs;
    address[] elevReqsArray;

    mapping(uint256 => Product) products;
    uint256[] productIds;

    mapping(string => Shop) shops;
    mapping(address => string) shopNamesByAddress;
    string[] shopCities;

    modifier onlyOwner() {
        require(users[msg.sender].currentRole == Role.OWNER, "Only can do it Owner!");
        _;
    }

    modifier onlySeller() {
        require(users[msg.sender].currentRole == Role.SELLER, "Only can do it Seller!");
        _;
    }

    modifier onlyShopSeller(string memory shopCity) {
        require(keccak256(abi.encodePacked(users[msg.sender].shop)) == keccak256(abi.encodePacked(shopCity)), "You have to be a seller in required shop");
        _;
    }

    modifier onlyShopOwner() {
        require(users[msg.sender].currentRole == Role.SHOP);
        _;
    }

    modifier onlyBuyer() {
        require(users[msg.sender].currentRole == Role.BUYER, "Only can do it Buyer!");
        _;
    }

    modifier onlySellerAndBuyer() {
        require(users[msg.sender].currentRole == Role.SELLER && users[msg.sender].currentRole == Role.BUYER, "Only can do it Seller and Buyer!");
        _;
    }

    function createUser(
        address addr,
        string memory username,
        string memory passwordHash,
        string memory secretHash
    ) public {
        require(!users[addr].exists && !users[userLogins[username]].exists, "User already exist");

        userLoginsArray.push(username);
        userLogins[username] = addr;
        users[addr] = User(
            username,
            "",
            keccak256(abi.encodePacked(passwordHash)),
            keccak256(abi.encodePacked(secretHash)),
            Role.BUYER,
            Role.BUYER,
            true
        );
    }

    function authorizateUser(
        string memory username,
        string memory password,
        string memory secret
    ) public view returns (bool success) {
        User memory user = users[userLogins[username]];

        require(user.exists, "User does not exist");
        require(
            keccak256(abi.encodePacked(password)) == user.passwordHash && keccak256(abi.encodePacked(secret)) == user.secretHash,
            "Wrong password or secret"
        );

        return true;
    }

    function newElevateRequest(Role requiredRole, string memory requiredShop) public onlySellerAndBuyer returns(bool) {
        require(!elevReqs[msg.sender].exists, "You have already sent an elevate request!");

        elevReqs[msg.sender] = ElevateRequest(
            msg.sender,
            requiredRole,
            requiredShop,
            true
        );
        elevReqsArray.push(msg.sender);

        return true;
    }

    function createNewOwner(
        address addr,
        string memory username,
        string memory passwordHash,
        string memory secretHash
    ) public onlyOwner {
        require(!users[addr].exists && !users[userLogins[username]].exists, "User already exist");

        userLoginsArray.push(username);
        userLogins[username] = addr;
        users[addr] = User(
            username,
            "",
            keccak256(abi.encodePacked(passwordHash)),
            keccak256(abi.encodePacked(secretHash)),
            Role.OWNER,
            Role.OWNER,
            true
        );
    }

    function approveElevateRequest(address requestAuthor, bool accept) public onlyOwner {
        elevReqs[requestAuthor].exists = false;
        if(!accept) return;
    }

    function cancelElevationRequest() public onlyOwner {
        require(
            elevReqs[msg.sender].exists,
            "You have not sent any elevate requests!"
        );

        elevReqs[msg.sender].exists = false;
        for (uint256 i = 0; i < elevReqsArray.length; i++) {
            if (elevReqsArray[i] == msg.sender) {
                delete elevReqsArray[i];
            }
        }
    }

    function buyProduct(string memory shop, uint256 productId, uint256 amount) public payable onlyBuyer returns(bool) {
        BuyRequests[buyRequestIds.length] = BuyRequest(
            msg.sender,
            productId,
            amount,
            shop,
            false,
            false,
            true 
        );

        ShopProduct memory product = shopProducts[shop].products[productId];
        require(product.exists, "This shop does not have this product");

        uint256 amountToPay = amount * product.price;
        require(msg.value == amountToPay, "You need to send exact amount of ether that is required to buy product");

        require(shopProducts[shop].products[productId].amount >= amount, "This shop does not have this item");
        shopProducts[shop].products[productId].amount -= amount;

        return true;
    }
 
    function allInfoProduct(uint256 productId) public view returns(uint256 id, string memory title, string memory description) {
        return (productId, products[productId].title, products[productId].description);
    }

    function acceptedBuyProduct(uint256 requestId) public onlySeller returns(bool) {
        BuyRequests[requestId].reviewed = true;
        BuyRequests[requestId].accepted = true;
        BuyRequest memory buyRequest = BuyRequests[requestId];

        ShopProduct memory shopProduct = shopProducts[buyRequest.shop].products[buyRequest.productId];
        shops[buyRequest.shop].allowedToCapture += buyRequest.amount * shopProduct.price;
        userProducts[buyRequest.author].shops[buyRequest.shop].products[buyRequest.productId].amount += buyRequest.amount;

        return true;
    }

    function cancelBuyProduct(uint256 requestId) public onlySeller returns(bool) {
        BuyRequests[requestId].reviewed = true;
        BuyRequest memory buyRequest = BuyRequests[requestId];

        shopProducts[buyRequest.shop].products[buyRequest.productId].amount += buyRequest.amount;

        return true;
    }

    function cancelRequestBuyProduct(uint256 requestId) public onlyBuyer returns(bool) {
        BuyRequests[requestId].exists = false;
        BuyRequest memory buyRequest = BuyRequests[requestId];

        shopProducts[buyRequest.shop].products[buyRequest.productId].amount += buyRequest.amount;

        return true;
    }

    function createRefundRequest(uint256 buyRequestId) public onlyBuyer returns(bool) {
        BuyRequest memory buyRequest = BuyRequests[buyRequestId];
        require(buyRequest.author == msg.sender, "You are not permitted to do this");

        uint256 price = shopProducts[buyRequest.shop].products[buyRequest.productId].price;
        require(shops[buyRequest.shop].allowedToCapture >= buyRequest.amount * price, "Shop does not have enough ether for you to refund");
        shops[buyRequest.shop].allowedToCapture -= buyRequest.amount * price;

        refundRequests[refundRequestIds.length] = RefundRequest(refundRequestIds.length, buyRequestId, msg.sender, false, false, true);
        refundRequestIds.push(refundRequestIds.length);

        return true;
    }

    function test() public view returns(uint256, uint256) {
        uint256 amount = 5;
        uint256 price = shopProducts["Moscow"].products[0].price * amount;
        return (shops["Moscow"].allowedToCapture, price);
    }

    function acceptRefundRequest(uint256 refundRequestId) public onlySeller returns(bool) {
        refundRequests[refundRequestId].accepted = true;
        refundRequests[refundRequestId].reviewed = true;

        BuyRequest memory buyRequest = BuyRequests[refundRequests[refundRequestId].buyRequestId];
        uint256 price = shopProducts[buyRequest.shop].products[buyRequest.productId].price;
        payable(refundRequests[refundRequestId].author).transfer(buyRequest.amount * price);

        return true;
    }

    function denyRefundRequest(uint256 refundRequestId) public onlySeller returns(bool) {
        refundRequests[refundRequestId].reviewed = true;
        
        BuyRequest memory buyRequest = BuyRequests[refundRequests[refundRequestId].buyRequestId];

        uint256 price = shopProducts[buyRequest.shop].products[buyRequest.productId].price;
        shops[buyRequest.shop].allowedToCapture += buyRequest.amount * price;
        return true;
    }

    function cancelRefundRequest(uint256 refundRequestId) public onlyBuyer {
        refundRequests[refundRequestId].exists = false;

        BuyRequest memory buyRequest = BuyRequests[refundRequests[refundRequestId].buyRequestId];
        uint256 price = shopProducts[buyRequest.shop].products[buyRequest.productId].price;
        shops[buyRequest.shop].allowedToCapture += buyRequest.amount * price;
    }


    function balance(address owner) public view returns(uint accountBalance)
{
   accountBalance = owner.balance;
}
}